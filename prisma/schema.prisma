// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  PATIENT
  NURSE
  DOCTOR
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id        Int      @id @default(autoincrement()) // Auto-generated integer ID
  email     String   @unique
  password  String
  name      String
  role      Role
  patient   Patient? @relation("UserToPatient")
  nurse     Nurse?   @relation("UserToNurse")
  doctor    Doctor?  @relation("UserToDoctor")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Patient {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation("UserToPatient", fields: [userId], references: [id], onDelete: Cascade)
  age       Int
  patientId String   @unique
  gender    Gender
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Nurse {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation("UserToNurse", fields: [userId], references: [id], onDelete: Cascade)
  gender    Gender
  nurseId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Doctor {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation("UserToDoctor", fields: [userId], references: [id], onDelete: Cascade)
  gender    Gender
  doctorId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
